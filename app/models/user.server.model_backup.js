var mongoose = require('mongoose'), crypto = require('crypto'), Schema = mongoose.Schema;

var UserSchema = new Schema({
	firstName: String,
	lastName: String,
	email: {
		type: String,
		match: [/.+\@.+\..+/, "Please fill a valid e-mail address"], // regex validators, preventing the saving of any document that doesn't match the regex
		index: true // optimize queries using email
	},
	role:{
		type: String,
		enum: ['Admin', 'Owner', 'User']
	},
	username: {
		type: String,
		required: 'Username is required', // predefined validators, preventing the saving of any document that doesn't contain that field
		trim: true,
		unique: true // basic of indexing
	},
	password: {
		type: String,
		// custom validator:
		// [validation funciton, error message]
		// prevent saving of documents and pass the error message to the callback
		validate: [
			function(password){
				return password.length >= 6;				
			},
			'password should be longer'
		]
	},
	// used to hash password
	salt:{
		type: String
	},
	// indicate the strategy used to register the user
	provider: {
		type: String,
		required: 'Provider is required'
	},
	// indicate the user identifier for the authentication strategy
	providerId: String,
	// store the user object retrieved from OAuth providers ???
	providerData: {},
	created:{
		type: Date,
		default: Date.now // it will update the created every time I query if there's no created field or Date.now is dynamic?
	},
	website: {
		type: String,

		// custom setter modifier
		set: function(url){
			if (!url){
				return url;
			} else{
				if (url.indexOf('http://') !== 0 && url.indexOf('https://') !== 0) {
					url = 'http://' + url;
				}
				return url;
			}
		},
		// custom getter modifier
		get: function(url){
			if (!url){
				return url;
			}else{
				if (url.indexOf('http://') !== 0 && url.indexOf('https://') !== 0){
					url = 'http://' + url;
				}
				return url;
			}
		}
	}
});
// it's called pre-save middleware, handle the hashing of user's passwords
// set the middleware of save() to run in order
UserSchema.pre('save', function(next){
	// when pre is called? pre called when save is called
	if (this.password){
		// Buffer: create autogenerated pseudo-random hashing salt
		this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
		// replaces the current user password with a hashed password using the hashPassword() instance method
		this.password = this.hashPassword(this.password);
	}
	next();
});
// instance method: hash a password string by utilizing Node.js' crypto module
UserSchema.methods.hashPassword = function(password){
	// what is pbkdf2Sync
	// what is the usage of salt
	// what are these parameters
	return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
}
// post middleware is defined using the post() method of the schema object
UserSchema.post('save', function(next){
	console.log('post');
	if (this.isNew){ // boolean flag specifying if the document is new
		console.log('A new user was created.');
	} else{
		console.log('A user updated its detail.');
	}
});
// static method: find an available unique username for new users.
// e.g. username = asdf, 
UserSchema.statics.findUniqueUsername = function(username, suffix, callback){
	var _this = this; // what this is referring to
	var possibleUsername = username + (suffix || ''); // what does || do
	_this.findOne({
		username: possibleUsername
	}, function(err, user){
		if (!err){
			if (!user){
				// what does callback do
				callback(possibleUsername);
			} else {
				// what is (suffix || 0) + 1 ??
				// what recursion?
				return _this.findUniqueUsername(username, (suffix || 0) + 1, callback);
			}
		} else{
			callback(null);
		}
	});
};
// instance method: accepts a string argument, hashes it and compares it to the current user's hashed password
UserSchema.methods.authenticate = function(password){
	return this.password === this.hashPassword(password);
}; // this will be called from any User model ('User') model is defined in "mongoose.model('User', UserSchema)"

UserSchema.statics.findOneByUsername = function(username, callback){
	this.findOne({ username: new RegExp(username, 'i')}, callback);
}; // using findOne() to retrieve a user's document that has a certain username

// virtual: not in the document but dynamically calculated
UserSchema.virtual('fullName').get(function(){
	return this.firstName + ' ' + this.lastName;
}).set(function(fullName){
	var splitName = fullName.split(' ');
	this.firstName = splitName[0] || '';
	this.lastName = splitName[1] || '';
});//help save documents, ???

UserSchema.set('toJSON', {getters: true, virtuals: true}); //force mongoose to include getter in effect, otherwise it won't in effect

mongoose.model('User', UserSchema);

var PostSchema = new Schema({
	title: {
		type: String,
		required: true
	},
	content: {
		type: String,
		required: true
	},
	author: {
		type: Schema.ObjectId,
		ref: 'User' // tell mongoose that the author field will use the user model to populate the value
	}
});

mongoose.model('Post', PostSchema);
